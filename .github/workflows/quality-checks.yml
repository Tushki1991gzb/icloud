# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Quality Checks

on:
  push:
    branches:
      - '**'
  pull_request:
    # branches: [ master ]
  workflow_dispatch:

jobs:
  skip_check:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-22.04
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: 'same_content_newer'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/*.md", "examples/**", "docs/**"]'
          do_not_skip: '["workflow_dispatch", "schedule"]'

  lint:
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Test dependencies
      run: |
        pip3 install --disable-pip-version-check .[test]

    - name: Lint
      run: |
        scripts/lint

  type_check: 
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    runs-on: ubuntu-20.04
    strategy: 
      matrix: 
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12]
    steps: 
    - uses: actions/checkout@v4 
    - name: Set up Python ${{ matrix.python-version }} 
      uses: actions/setup-python@v5 
      with: 
        python-version: ${{ matrix.python-version }} 
        cache: 'pip' 
    - name: Install Test dependencies 
      run: | 
        pip3 install --disable-pip-version-check .[test] 
    - name: Type Check 
      run: | 
        scripts/type_check 

  patch_version:
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    uses: ./.github/workflows/patch-version.yml

  test: 
    needs: [skip_check, patch_version]
    if: needs.skip_check.outputs.should_skip != 'true'
    runs-on: ubuntu-20.04
    strategy: 
      matrix: 
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12]
    steps: 
    - name: Install Locales for Tests
      run: | 
        sudo apt-get update && sudo apt-get -y install locales locales-all

    - uses: actions/checkout@v4 

    - name: Download version info
      uses: actions/download-artifact@v4
      with:
        name: icloudpd-${{github.sha}}-version-info
        path: |
          src/foundation

    - name: Set up Python ${{ matrix.python-version }} 
      uses: actions/setup-python@v5 
      with: 
        python-version: ${{ matrix.python-version }} 
        cache: 'pip' 
    
    - name: Install Test dependencies 
      run: | 
        pip3 install --disable-pip-version-check .[test] 
 
    - name: Test
      run: |
        scripts/test

  test_non_linux: 
    needs: [skip_check, patch_version]
    if: needs.skip_check.outputs.should_skip != 'true'
    runs-on: ${{ matrix.os }} 
    defaults:
      run:
        shell: bash
    strategy: 
      fail-fast: false
      matrix: 
        python-version: [3.12]
        os: 
          - "macos-12"
          - "macos-13"
          - "macos-14"
          - "windows-2019"
          - "windows-2022"
    steps: 

    - uses: actions/checkout@v4 

    - name: Download version info
      uses: actions/download-artifact@v4
      with:
        name: icloudpd-${{github.sha}}-version-info
        path: |
          src/foundation

    - name: Set up Python ${{ matrix.python-version }} 
      uses: actions/setup-python@v5 
      with: 
        python-version: ${{ matrix.python-version }} 
        cache: 'pip' 
    
    - name: Install Test dependencies 
      run: | 
        pip3 install --disable-pip-version-check .[test] 
 
    - name: Test
      run: |
        scripts/test

  get_version:
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4

    - name: Retrieve version
      id: get_version
      run: |
        echo icloudpd_version=$(scripts/get_version) >> $GITHUB_OUTPUT

    - name: Log version
      run: |
        echo "icloudpd_version=${{steps.get_version.outputs.icloudpd_version}}"

    outputs:
      icloudpd_version: ${{steps.get_version.outputs.icloudpd_version}}

  extract_changelog:
    needs: [get_version, skip_check]
    if: needs.skip_check.outputs.should_skip != 'true'
    uses: ./.github/workflows/extract-changelog.yml
    with:
      icloudpd_version: ${{needs.get_version.outputs.icloudpd_version}}

  build_docker:
    needs: 
      - skip_check
      - get_version
    if: false && needs.skip_check.outputs.should_skip != 'true'
    # 24.02 gives futex error during apt: https://github.com/actions/runner-images/issues/9977
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        platform:
          - [
            "linux/amd64",
            "amd64",
          ]
          - [
            "linux/arm64",
            "arm64",
          ]
          - [
            "linux/arm/v7",
            "arm32v7",
          ]
          - [
            "linux/386",
            "386",
          ]
          - [
            "linux/arm/v6",
            "arm32v6",
          ]
    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      if: matrix.platform[1] != 'amd64' && matrix.platform[1] != '386'
      uses: docker/setup-qemu-action@v3

    - uses: docker/setup-buildx-action@v3
      id: setup

    # - name: Cache Folders
    #   uses: actions/cache@v4
    #   id: cache
    #   with:
    #     # if the list or anything in these folders expected to change, then cache needs to be cleared and rebuilt, because it is keyed only by pyproject.toml hash
    #     path: .cache
    #     key: build-folders-${{ matrix.platform[0] }}-${{ hashFiles('pyproject.toml','Dockerfile.build', 'Dockerfile.cache_extract', 'Dockerfile.cache_inject') }}
    #     restore-keys: |
    #       build-folders-${{ matrix.platform[0] }}-

    - name: Cache Folders Build
      uses: actions/cache@v4
      id: cache
      with:
        # if the list or anything in these folders expected to change, then cache needs to be cleared and rebuilt, because it is keyed only by pyproject.toml hash
        path: .cache
        key: build-${{ matrix.platform[1] }}-${{ hashFiles('pyproject.toml','Dockerfile.build') }}
        restore-keys: |
          build-${{ matrix.platform[1] }}-
      
    - name: Create folders on cache miss
      run: |
        mkdir -p .cache/var/cache/apt
        mkdir -p .cache/var/lib/apt
        mkdir -p .cache/root/.cache/pip
        mkdir -p .cache/root/.distrib/rust
      
    - name: DEBUG Cache size on restore
      run: |
        du -h -d 1 .cache
        
    # - name: Inject /var/cache/apt into docker cache
    #   uses: docker/build-push-action@v6
    #   with:
    #     push: false
    #     file: Dockerfile.cache_inject
    #     context: .cache/var/cache/apt
    #     build-args: TARGET=/var/cache/apt

    # - name: Inject /var/lib/apt into docker cache
    #   uses: docker/build-push-action@v6
    #   with:
    #     push: false
    #     file: Dockerfile.cache_inject
    #     context: .cache/var/lib/apt
    #     build-args: TARGET=/var/lib/apt

    # - name: Inject /root/.cache/pip into docker cache
    #   uses: docker/build-push-action@v6
    #   with:
    #     push: false
    #     file: Dockerfile.cache_inject
    #     context: .cache/root/.cache/pip
    #     build-args: TARGET=/root/.cache/pip
          
    # - name: Inject /root/.distrib/rust into docker cache
    #   uses: docker/build-push-action@v6
    #   with:
    #     push: false
    #     file: Dockerfile.cache_inject
    #     context: .cache/root/.distrib/rust
    #     build-args: TARGET=/root/.distrib/rust

    - name: Inject docker cache
      uses: reproducible-containers/buildkit-cache-dance@v3.1.2
      with:
        cache-map: |
          {
            ".cache/var/cache/apt": "/var/cache/apt",
            ".cache/var/lib/apt": "/var/lib/apt",
            ".cache/root/.cache/pip": "/root/.cache/pip",
            ".cache/root/.distrib/rust": "/root/.distrib/rust"
          }
    
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        push: false
        platforms: ${{ matrix.platform[0] }}
        # do not cache layers
        file: Dockerfile.build
        outputs: type=local,dest=dist

    # - name: Extract /var/cache/apt into docker cache
    #   uses: docker/build-push-action@v6
    #   with:
    #     push: false
    #     file: Dockerfile.cache_extract
    #     outputs: type=local,dest=.cache/var/cache/apt
    #     provenance: false
    #     build-args: TARGET=/var/cache/apt

    # - name: Extract /var/lib/apt into docker cache
    #   uses: docker/build-push-action@v6
    #   with:
    #     push: false
    #     file: Dockerfile.cache_extract
    #     outputs: type=local,dest=.cache/var/lib/apt
    #     provenance: false
    #     build-args: TARGET=/var/lib/apt

    # - name: Extract /root/.cache/pip into docker cache
    #   uses: docker/build-push-action@v6
    #   with:
    #     push: false
    #     file: Dockerfile.cache_extract
    #     outputs: type=local,dest=.cache/root/.cache/pip
    #     provenance: false
    #     build-args: TARGET=/root/.cache/pip
          
    # - name: Extract /root/.distrib/rust into docker cache
    #   uses: docker/build-push-action@v6
    #   with:
    #     push: false
    #     file: Dockerfile.cache_extract
    #     outputs: type=local,dest=.cache/root/.distrib/rust
    #     provenance: false
    #     build-args: TARGET=/root/.distrib/rust

    - name: DEBUG Cache size on save
      run: |
        du -h -d 1 .cache

    - name: Compatibility TZLC
      continue-on-error: true
      uses: addnab/docker-run-action@v3
      with:
        image: busybox
        shell: sh
        options: -v ${{ github.workspace }}/dist:/dist --platform linux/${{ matrix.platform[0] }}
        run: >
          TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 /dist/icloudpd --use-os-locale --version


    - name: Reorg contents
      continue-on-error: true
      run: |
        mv dist/icloud dist/icloud-${{needs.get_version.outputs.icloudpd_version}}-linux-${{ matrix.platform[1] }}
        mv dist/icloudpd dist/icloudpd-${{needs.get_version.outputs.icloudpd_version}}-linux-${{ matrix.platform[1] }}
        mv dist/icloudpd_ex dist/icloudpd_ex-${{needs.get_version.outputs.icloudpd_version}}-linux-${{ matrix.platform[1] }}

  build_docker_musl:
    needs: 
      - skip_check
      - get_version
    if: needs.skip_check.outputs.should_skip != 'true'
    # 24.02 gives futex error during apt: https://github.com/actions/runner-images/issues/9977
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        platform:
          - [
            "linux/amd64",
            "amd64",
          ]
          - [
            "linux/arm64",
            "arm64",
          ]
          # these do not have rust available and will not compile
          # - [
          #   "linux/arm/v7",
          #   "arm32v7",
          # ]
          # - [
          #   "linux/386",
          #   "386",
          # ]
          # - [
          #   "linux/arm/v6",
          #   "arm32v6",
          # ]
    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      if: matrix.platform[1] != 'amd64' && matrix.platform[1] != '386'
      uses: docker/setup-qemu-action@v3

    - uses: docker/setup-buildx-action@v3
      id: setup
    
    - name: Cache Folders Build
      uses: actions/cache@v4
      id: cache
      with:
        # if the list or anything in these folders expected to change, then cache needs to be cleared and rebuilt, because it is keyed only by pyproject.toml hash
        path: .cache
        key: build-musl-${{ matrix.platform[1] }}-${{ hashFiles('pyproject.toml','Dockerfile.build-musl') }}
        restore-keys: |
          build-musl-${{ matrix.platform[1] }}-

    - name: Create folders on cache miss
      run: |
        mkdir -p .cache/var/cache/apk
        mkdir -p .cache/root/.cache/pip
        mkdir -p .cache/root/.distrib/rust
      
    - name: DEBUG Cache size on restore
      run: |
        du -h -d 1 .cache

    - name: Inject docker cache
      uses: reproducible-containers/buildkit-cache-dance@v3.1.2
      with:
        cache-map: |
          {
            ".cache/var/cache/apk": "/var/cache/apk",
            ".cache/root/.cache/pip": "/root/.cache/pip",
            ".cache/root/.distrib/rust": "/root/.distrib/rust"
          }
              
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        push: false
        platforms: ${{ matrix.platform[0] }}
        # do not cache layers
        # cache-from: type=local,src=cache
        # cache-to: type=local,dest=cache-new,mode=max
        file: Dockerfile.build-musl
        outputs: type=local,dest=dist

    - name: Compatibility TZLC
      continue-on-error: true
      uses: addnab/docker-run-action@v3
      with:
        image: alpine:3.18
        shell: sh
        options: -v ${{ github.workspace }}/dist:/dist --platform ${{ matrix.platform[0] }}
        run: >
          export MUSL_LOCPATH="/usr/share/i18n/locales/musl" &&
          apk add --update tzdata musl-locale musl-locale-lang &&
          TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 /dist/icloudpd --use-os-locale --version

          
    # from https://github.com/ArchiveBox/ArchiveBox/blob/dev/.github/workflows/docker.yml
    # This ugly bit is necessary if you don't want your cache to grow forever
    # until it hits GitHub's limit of 5GB.
    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    # - name: Move cache
    #   run: |
    #     rm -rf .cache
    #     mv .cache-new .cache

    - name: Reorg contents
      continue-on-error: true
      run: |
        mv dist/icloud dist/icloud-${{needs.get_version.outputs.icloudpd_version}}-linux-musl-${{ matrix.platform[1] }}
        mv dist/icloudpd dist/icloudpd-${{needs.get_version.outputs.icloudpd_version}}-linux-musl-${{ matrix.platform[1] }}
        mv dist/icloudpd_ex dist/icloudpd_ex-${{needs.get_version.outputs.icloudpd_version}}-linux-musl-${{ matrix.platform[1] }}

        