# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Quality Checks

on:
  push:
    # branches: [ master ]
  pull_request:
    # branches: [ master ]
  workflow_dispatch:

jobs:

  test_win:
    runs-on: windows-latest
    steps:
     - run: |
        ls -la `which echo`

  check_quality:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7, 3.8, 3.9]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        scripts/install_deps

    - name: Lint
      run: |
        scripts/lint
        
    - name: Test
      run: |
        scripts/test

  get_version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Retrieve version and Changelog
      id: get_version
      run: |
        echo icloudpd_version=$(cat setup.py | grep version= | cut -d'"' -f 2) >> $GITHUB_OUTPUT
        echo 'icloudpd_changelog<<EOF' >> $GITHUB_OUTPUT
        scripts/extract_releasenotes CHANGELOG.md >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT

    - name: Log version and Changelog
      run: |
        echo "icloudpd_version=${{steps.get_version.outputs.icloudpd_version}}"
        echo "icloudpd_changelog=${{steps.get_version.outputs.icloudpd_changelog}}"

    outputs:
      icloudpd_version: ${{steps.get_version.outputs.icloudpd_version}}
      icloudpd_changelog: ${{steps.get_version.outputs.icloudpd_changelog}}

  build:
    runs-on: ${{ matrix.os }}
    needs: [get_version]
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7, 3.8, 3.9]
        include:
          - os: macos-latest
            python-version: 3.9
          - os: windows-latest
            python-version: 3.9

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install pip (Windows)
      run: python.exe -m pip install -r requirements-pip.txt
      if: ${{ matrix.os == 'windows-latest' }}

    - name: Install dependencies
      run: |
        scripts/install_deps

    - name: Build
      run: |
        scripts/build

    - name: Build Release Executables (Windows)
      run: |
        pyinstaller --onefile icloudpd.py --name icloudpd-${{needs.get_version.outputs.icloudpd_version}}-windows-amd64
        pyinstaller --onefile "$(which icloud)" --name icloud-${{needs.get_version.outputs.icloudpd_version}}-windows-amd64
      if: ${{ matrix.python-version == '3.9' && matrix.os == 'windows-latest' }}

    - name: Build Release Executables (Linux)
      run: |
        pyinstaller --onefile icloudpd.py --name icloudpd-${{needs.get_version.outputs.icloudpd_version}}-linux-amd64
        pyinstaller --onefile `which icloud` --name icloud-${{needs.get_version.outputs.icloudpd_version}}-linux-amd64
      if: ${{ matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest' }}

    - name: Build Release Executables (MacOS)
      run: |
        pyinstaller --onefile icloudpd.py --name icloudpd-${{needs.get_version.outputs.icloudpd_version}}-macos-amd64
        pyinstaller --onefile `which icloud` --name icloud-${{needs.get_version.outputs.icloudpd_version}}-macos-amd64
      if: ${{ matrix.python-version == '3.9' && matrix.os == 'macos-latest' }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      if: ${{ matrix.python-version == '3.9' }}
      with:
        name: icloudpd-${{needs.get_version.outputs.icloudpd_version}}-artifacts
        if-no-files-found: error
        path: |
          dist/icloud*

  build_docker:
    runs-on: ubuntu-latest
    needs: [get_version, build]

    steps:
    - uses: actions/checkout@v3

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: icloudpd-${{needs.get_version.outputs.icloudpd_version}}-artifacts
        path: |
          dist

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Builder instance name
      run: echo ${{ steps.buildx.outputs.name }}

    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Build Release Docker
      env:
        ICLOUDPD_VERSION: ${{needs.get_version.outputs.icloudpd_version}}
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile.release
        platforms: linux/amd64,linux/arm64,linux/386
        push: false
        tags: |
          icloudpd/icloudpd:latest
          icloudpd/icloudpd:${{needs.get_version.outputs.icloudpd_version}}
        build-args: |
          ICLOUDPD_VERSION=${{needs.get_version.outputs.icloudpd_version}}


  build_dev_docker:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Dev Docker
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: false
