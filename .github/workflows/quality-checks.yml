# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Quality Checks

on:
  push:
    branches:
      - '**'
  pull_request:
    # branches: [ master ]
  workflow_dispatch:

jobs:
  skip_check:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-22.04
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: 'same_content_newer'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/*.md", "examples/**", "docs/**"]'
          do_not_skip: '["workflow_dispatch", "schedule"]'

  lint:
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Test dependencies
      run: |
        pip3 install --disable-pip-version-check -e .[test]

    - name: Lint
      run: |
        scripts/lint

  type_check: 
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    runs-on: ubuntu-20.04
    strategy: 
      matrix: 
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12]
    steps: 
    - uses: actions/checkout@v4 
    - name: Set up Python ${{ matrix.python-version }} 
      uses: actions/setup-python@v5 
      with: 
        python-version: ${{ matrix.python-version }} 
        cache: 'pip' 
    - name: Install Test dependencies 
      run: | 
        pip3 install --disable-pip-version-check -e .[test] 
    - name: Type Check 
      run: | 
        scripts/type_check 

  patch_version:
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    uses: ./.github/workflows/patch-version.yml

  test: 
    needs: [skip_check, patch_version]
    if: needs.skip_check.outputs.should_skip != 'true'
    runs-on: ubuntu-20.04
    strategy: 
      matrix: 
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12]
    steps: 
    - name: Install Locales for Tests
      run: | 
        sudo apt-get update && sudo apt-get -y install locales locales-all

    - uses: actions/checkout@v4 

    - name: Download version info
      uses: actions/download-artifact@v4
      with:
        name: icloudpd-${{github.sha}}-version-info
        path: |
          src/foundation

    - name: Set up Python ${{ matrix.python-version }} 
      uses: actions/setup-python@v5 
      with: 
        python-version: ${{ matrix.python-version }} 
        cache: 'pip' 
    
    - name: Install Test dependencies 
      run: | 
        pip3 install --disable-pip-version-check -e .[test] 
 
    - name: Test
      run: |
        scripts/test

  test_non_linux: 
    needs: [skip_check, patch_version]
    if: needs.skip_check.outputs.should_skip != 'true'
    runs-on: ${{ matrix.os }} 
    defaults:
      run:
        shell: bash
    strategy: 
      fail-fast: false
      matrix: 
        python-version: [3.12]
        os: 
          - "macos-12"
          - "macos-13"
          - "macos-14"
          - "windows-2019"
          - "windows-2022"
    steps: 

    - uses: actions/checkout@v4 

    - name: Download version info
      uses: actions/download-artifact@v4
      with:
        name: icloudpd-${{github.sha}}-version-info
        path: |
          src/foundation

    - name: Set up Python ${{ matrix.python-version }} 
      uses: actions/setup-python@v5 
      with: 
        python-version: ${{ matrix.python-version }} 
        cache: 'pip' 
    
    - name: Install Test dependencies 
      run: | 
        pip3 install --disable-pip-version-check -e .[test] 
 
    - name: Test
      run: |
        scripts/test

  get_version:
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4

    - name: Retrieve version
      id: get_version
      run: |
        echo icloudpd_version=$(scripts/get_version) >> $GITHUB_OUTPUT

    - name: Log version
      run: |
        echo "icloudpd_version=${{steps.get_version.outputs.icloudpd_version}}"

    outputs:
      icloudpd_version: ${{steps.get_version.outputs.icloudpd_version}}

  extract_changelog:
    needs: [get_version, skip_check]
    if: needs.skip_check.outputs.should_skip != 'true'
    uses: ./.github/workflows/extract-changelog.yml
    with:
      icloudpd_version: ${{needs.get_version.outputs.icloudpd_version}}

  build_docker:
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4

    - uses: docker/setup-buildx-action@v2

    - name: Cache var-cache-apt
      uses: actions/cache@v3
      with:
        path: var-cache-apt
        key: var-cache-apt-${{ hashFiles('scripts/build_apt_install') }}

    - name: Cache var-lib-apt
      uses: actions/cache@v3
      with:
        path: var-lib-apt
        key: var-lib-apt-${{ hashFiles('scripts/build_apt_install') }}

    - name: Cache pip-cache
      uses: actions/cache@v3
      with:
        path: root-cache-pip
        key: root-cache-pip-${{ hashFiles('pyproject.toml') }}
  
    - name: inject var-cache-apt into docker
      uses: reproducible-containers/buildkit-cache-dance@v2.1.2
      with:
        cache-source: var-cache-apt
        cache-target: /var/cache/apt

    - name: inject var-lib-apt into docker
      uses: reproducible-containers/buildkit-cache-dance@v2.1.2
      with:
        cache-source: var-lib-apt
        cache-target: /var/lib/apt

    - name: inject root-cache-pip into docker
      uses: reproducible-containers/buildkit-cache-dance@v2.1.2
      with:
        cache-source: root-cache-pip
        cache-target: /root/.cache/pip

    - name: Build Docker
      run: |
        docker buildx build -o /tmp/builds --platform=linux/amd64 -f Dockerfile.build .
      # ,linux/arm64,linux/arm/v7,linux/386
    
    - name: Log contents
      run: |
        ls -la /tmp/builds
  