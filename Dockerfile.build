# Multi-arch build (local):
#     docker buildx create --use --driver=docker-container --name container --bootstrap
#     docker buildx build . --cache-to type=local,dest=.cache,mode=max --cache-from type=local,src=.cache --platform=linux/amd64 --builder=container --progress plain -o dist -f Dockerfile.build
# ,linux/arm64,linux/arm/v7,linux/386
# rust links from https://forge.rust-lang.org/infra/other-installation-methods.html#standalone-installers
# arm7l instead of v6 issue: https://stackoverflow.com/questions/78535054/how-do-you-docker-buildx-build-for-arm-v6-on-qemu-emulated-platforms-that-pres

# map source image to base
FROM python:3.12 AS base
ARG TARGETARCH
ARG TARGETVARIANT
ARG QEMU_CPU
ENV DEBIAN_FRONTEND=noninteractive
WORKDIR /app
RUN \
  --mount=type=cache,target=/var/cache/apt,sharing=shared \
  --mount=type=cache,target=/var/lib/apt,sharing=shared \
  rm -f /etc/apt/apt.conf.d/docker-clean && \
  echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' >/etc/apt/apt.conf.d/keep-cache && \
  apt-get update && \
  apt-get install -y patchelf musl-tools
  
FROM base AS base_amd64_none
# does not need rustc

FROM base AS base_386_none
ARG TARGETARCH
ARG TARGETVARIANT
ENV RUST_DISTRO_NAME=rust-1.79.0-i686-unknown-linux-gnu
RUN \
    --mount=type=cache,target=/root/.distrib/rust,sharing=shared \
    (if [ ! -d "/root/.distrib/rust/${RUST_DISTRO_NAME}" ]; then \
    (wget --no-verbose --no-clobber https://static.rust-lang.org/dist/${RUST_DISTRO_NAME}.tar.xz && \
    tar -xf ${RUST_DISTRO_NAME}.tar.xz -C /root/.distrib/rust/); fi) && \
    /root/.distrib/rust/${RUST_DISTRO_NAME}/install.sh

FROM base AS base_arm64_none
# does not need rustc

FROM base AS base_arm_v7
ARG TARGETARCH
ARG TARGETVARIANT
ENV RUST_DISTRO_NAME=rust-1.79.0-armv7-unknown-linux-gnueabihf
RUN \
    --mount=type=cache,target=/root/.distrib/rust,sharing=shared \
    (if [ ! -d "/root/.distrib/rust/${RUST_DISTRO_NAME}" ]; then \
    (wget --no-verbose --no-clobber https://static.rust-lang.org/dist/${RUST_DISTRO_NAME}.tar.xz && \
    tar -xf ${RUST_DISTRO_NAME}.tar.xz -C /root/.distrib/rust/); fi) && \
    /root/.distrib/rust/${RUST_DISTRO_NAME}/install.sh

FROM base AS base_arm_v6
# pkg-config
ARG TARGETARCH
ARG TARGETVARIANT
ARG QEMU_CPU
ENV RUST_DISTRO_NAME=rust-1.79.0-arm-unknown-linux-gnueabi
RUN \
    --mount=type=cache,target=/root/.distrib/rust,sharing=shared \
    (if [ ! -d "/root/.distrib/rust/${RUST_DISTRO_NAME}" ]; then \
    (wget --no-verbose --no-clobber https://static.rust-lang.org/dist/${RUST_DISTRO_NAME}.tar.xz && \
    tar -xf ${RUST_DISTRO_NAME}.tar.xz -C /root/.distrib/rust/); fi) && \
    /root/.distrib/rust/${RUST_DISTRO_NAME}/install.sh
      
FROM base_${TARGETARCH}_${TARGETVARIANT:-none} AS builder
ARG TARGETARCH
ARG TARGETVARIANT
ARG QEMU_CPU
WORKDIR /app
COPY LICENSE.md .
COPY README_PYPI.md .
COPY scripts scripts/
COPY binary_dist binary_dist/
COPY pyproject.toml .
COPY src src/
# staticx must be installed after scons - they do not have deps that pip can handle
RUN \
    --mount=type=cache,target=/root/.cache/pip,sharing=shared \
    python3 -m venv .venv && \
    . .venv/bin/activate && \
    echo "List pip cache..." && \
    pip3 cache list && \
    pip3 install --disable-pip-version-check .[dev,devlinux] && \
    BOOTLOADER_CC=musl-gcc pip3 install --disable-pip-version-check staticx==0.14.1
RUN \
    . .venv/bin/activate && \
    echo "Building binaries..." && \
    scripts/build_bin2 icloudpd icloud  && \
    scripts/build_bin1 icloud && \
    scripts/build_bin1 icloudpd_ex  && \
    scripts/build_static icloudpd && \
    scripts/build_static icloud && \
    scripts/build_static icloudpd_ex && \
    scripts/build_whl

FROM scratch
WORKDIR /
COPY --from=builder /app/dist/icloud* .
